import{_ as s,c as n,o as a,a as l}from"./app.fa774493.js";const d=JSON.parse('{"title":"Nginx使用手册","description":"","frontmatter":{},"headers":[{"level":2,"title":"下载Nginx","slug":"下载nginx","link":"#下载nginx","children":[]},{"level":2,"title":"nginx常用命令","slug":"nginx常用命令","link":"#nginx常用命令","children":[]},{"level":2,"title":"部署项目到Nginx根目录","slug":"部署项目到nginx根目录","link":"#部署项目到nginx根目录","children":[]},{"level":2,"title":"多个项目部署到Nginx","slug":"多个项目部署到nginx","link":"#多个项目部署到nginx","children":[]},{"level":2,"title":"端口代理","slug":"端口代理","link":"#端口代理","children":[]},{"level":2,"title":"Vue使用Nginx发布后刷新页面报404错误","slug":"vue使用nginx发布后刷新页面报404错误","link":"#vue使用nginx发布后刷新页面报404错误","children":[]},{"level":2,"title":"Nginx做代理时X-Forwarded-For信息头的处理","slug":"nginx做代理时x-forwarded-for信息头的处理","link":"#nginx做代理时x-forwarded-for信息头的处理","children":[]},{"level":2,"title":"相关推荐地址","slug":"相关推荐地址","link":"#相关推荐地址","children":[]}],"relativePath":"04.technology/01.Nginx使用.md"}'),p={name:"04.technology/01.Nginx使用.md"},o=l(`<h1 id="nginx使用手册" tabindex="-1">Nginx使用手册 <a class="header-anchor" href="#nginx使用手册">¶</a></h1><p>Nginx是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。</p><h2 id="下载nginx" tabindex="-1">下载Nginx <a class="header-anchor" href="#下载nginx">¶</a></h2><p>先<a href="http://nginx.org/en/download.html" target="_blank" rel="noreferrer">下载Nginx</a>，以windows版为例，下载后niginx压缩包并解压到任意目录，双击nginx.exe，在浏览器中访问<a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>，如果出现<code>Welcome to nginx!</code>页面则说明成功。</p><h2 id="nginx常用命令" tabindex="-1">nginx常用命令 <a class="header-anchor" href="#nginx常用命令">¶</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 打开帮助</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-h</span><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 检查配置文件是否正确</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 以下命令均要先启动nginx才能执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 退出  </span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">quit</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 重新启动（注意不会重新读取配置文件）</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reopen</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 重新读取配置文件</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reload</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h2 id="部署项目到nginx根目录" tabindex="-1">部署项目到Nginx根目录 <a class="header-anchor" href="#部署项目到nginx根目录">¶</a></h2><p>以vue项目为例，使用命令<code>npm run build</code>创建输出文件，将dist文件夹下的所有内容复制到nginx目录下的<code>webapp/</code>内（没有的话自行创建）。</p><p>修改<code>nginx</code>目录中的<code>conf/nginx.conf</code>文件，在 http -&gt; server 节点中，修改location节的内容：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">root</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">webapp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">index.html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="多个项目部署到nginx" tabindex="-1">多个项目部署到Nginx <a class="header-anchor" href="#多个项目部署到nginx">¶</a></h2><p>有时一个Nginx中放了好几个子项目，需要将不同的项目通过不同的路径来访问。</p><p>对于项目1而言，修改<code>vue.config.js</code>文件的<code>publicPath</code>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">publicPath:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/vue1/</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>对于项目2而言，修改<code>vue.config.js</code>文件的<code>publicPath</code>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">publicPath:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/vue2/</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>分别在vue项目根目录中使用命令<code>npm run build</code>创建输出文件，将dist文件夹下的所有内容复制到nginx目录下的<code>webapp/vue1</code>和<code>webapp/vue2</code>内（没有的话自行创建）。</p><p>修改nginx目录中的conf/nginx.conf文件，在 http -&gt; server 节点中，修改location节的内容：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/vue1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">root</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">webapp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">index.html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/vue2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">root</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">webapp</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">index.html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>在nginx根目录使用命令<code>nginx -s reload</code>即可在浏览器中通过<code>http://localhost/vue1</code>、<code>http://localhost/vue2</code>访问项目1、项目2。</p><h2 id="端口代理" tabindex="-1">端口代理 <a class="header-anchor" href="#端口代理">¶</a></h2><p>当前后端项目分别部署在同一台机器上时，由于无法使用相同的端口，故后端一般会将端口号设置成不同的值（例如8080），但是当前端向后端请求资源时还要加上端口号，未免显得麻烦，故利用可以nginx将前端的指定路径代理到后端的8080端口上。</p><p>在<code>conf/nginx.conf</code>文件中增加<code>location</code>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_pass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://localhost:</span><span style="color:#F78C6C;">8080</span><span style="color:#C3E88D;">/api</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p>这样，当前端访问/api路径时，实际上访问的是<code>http://localhost:8080/api</code>路径。</p><h2 id="vue使用nginx发布后刷新页面报404错误" tabindex="-1">Vue使用Nginx发布后刷新页面报404错误 <a class="header-anchor" href="#vue使用nginx发布后刷新页面报404错误">¶</a></h2><p><em>问题现象：</em></p><p>使用Vue-cli构建的项目，在本地调试运行都是OK的，打包之后使用Nginx发布后，指定跳转页面是ok的，但是刷新页面，reload页面时，报错404，找不到页面。Nginx端日志显示找不到资源路径。</p><p><em>解决方案：</em></p><h4 id="方案1" tabindex="-1">方案1 <a class="header-anchor" href="#方案1">¶</a></h4><p>首先，出问题的原因是：在 Vue 项目中，可以选择 hash或者 history.pushState() 实现路由跳转。</p><p>使用history模式的配置是：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Router</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">history</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>那么，当我们 npm run build 完成并部署到服务器后，刷新某个路由下的页面，会出现 404 或者 502 错误。</p><p>这是因为刷新页面时访问的资源在服务端找不到，因为vue-router设置的路径不是真实存在的路径。所以把mode改为hash模式就可以了。</p><h4 id="方案2" tabindex="-1">方案2 <a class="header-anchor" href="#方案2">¶</a></h4><p>继续使用history模式，修改Nginx的配置，使所有的请求都定向到index.html页面</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#FFCB6B;">try_files</span><span style="color:#A6ACCD;"> $uri $uri</span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@router</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@router</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#FFCB6B;">rewrite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">^.</span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;">$ </span><span style="color:#C3E88D;">/index.html</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">last</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"></span></code></pre></div><h2 id="nginx做代理时x-forwarded-for信息头的处理" tabindex="-1">Nginx做代理时X-Forwarded-For信息头的处理 <a class="header-anchor" href="#nginx做代理时x-forwarded-for信息头的处理">¶</a></h2><p>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。</p><p><a href="https://www.cnblogs.com/duhuo/p/5700900.html" target="_blank" rel="noreferrer">参考地址</a></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">server</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">listen</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_pass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_redirect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_set_header</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">X-Real-IP</span><span style="color:#A6ACCD;"> $remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_set_header</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">X-Forwarded-For</span><span style="color:#A6ACCD;"> $proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_set_header</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Host</span><span style="color:#A6ACCD;"> $host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">client_max_body_size</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">10m</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                    </span><span style="color:#676E95;font-style:italic;"># 允许客户端请求的最大单文件字节数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">client_body_buffer_size</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">128k</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                </span><span style="color:#676E95;font-style:italic;"># 缓冲区代理缓冲用户端请求的最大字节数，</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_connect_timeout</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">90</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                    </span><span style="color:#676E95;font-style:italic;"># nginx跟后端服务器连接超时时间(代理连接超时)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_send_timeout</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">90</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                       </span><span style="color:#676E95;font-style:italic;"># 后端服务器数据回传时间(代理发送超时)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_read_timeout</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">90</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                       </span><span style="color:#676E95;font-style:italic;"># 连接成功后，后端服务器响应时间(代理接收超时)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_buffer_size</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">4k</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                        </span><span style="color:#676E95;font-style:italic;"># 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_buffers</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">32k</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                         </span><span style="color:#676E95;font-style:italic;"># proxy_buffers缓冲区，网页平均在32k以下的设置</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_busy_buffers_size</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">64k</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                                 </span><span style="color:#676E95;font-style:italic;"># 高负荷下缓冲大小（proxy_buffers*2）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">proxy_temp_file_write_size</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">64k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="相关推荐地址" tabindex="-1">相关推荐地址 <a class="header-anchor" href="#相关推荐地址">¶</a></h2><ul><li><a href="https://juejin.cn/post/6899605130052632589#heading-4" target="_blank" rel="noreferrer">nginx的配置和使用</a></li><li><a href="https://www.cnblogs.com/mobingfeng/p/12779163.html" target="_blank" rel="noreferrer">Window下将nginx配置为开机自动启动</a></li></ul>`,44),e=[o];function t(c,r,i,C,y,D){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};
